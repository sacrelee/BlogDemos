/// Lexical Structure 词法结构

/*  **概述
  Swift 的“词法结构（lexical structure）”描述了能构成该语言中合法标记（tokens）的字符序列。这些合法标记组成了语言中最底层的构建基块，并在之后的章节中用于描述语言的其他部分。一个合法标记由一个标识符、关键字、标点符号、文字或运算符组成。

  通常情况下，标记是在随后将介绍的语法约束下，由 Swift 源文件的输入文本中提取可能的最长子串生成。这种方法称为“最长匹配项（longest match）”，或者“最大适合”（maximal munch）。
*/

/// 空白与注释
/*
   空白（whitespace）有两个用途：分隔源文件中的标记和帮助区分运算符属于前缀还是后缀（参见 运算符），在其他情况下则会被忽略。以下的字符会被当作空白：空格（space）（U+0020）、换行符（line feed）（U+000A）、回车符（carriage return）（U+000D）、水平制表符（horizontal tab）（U+0009）、垂直制表符（vertical tab）（U+000B）、换页符（form feed）（U+000C）以及空（null）（U+0000）。

   注释（comments）被编译器当作空白处理。单行注释由 // 开始直至遇到换行符（line feed）（U+000A）或者回车符（carriage return）（U+000D）。多行注释由 /* 开始，以 */ 结束。注释允许嵌套，但注释标记必须匹配。

   就像 标记格式引用（Markup Formatting Reference） 所说的那样，注释可以包含附加的格式和标记。
*/

/// 标识符
/*
    标识符（identifiers）可以由以下的字符开始：大写或小写的字母 A 到 Z、下划线 _、基本多文种平面（Basic Multilingual Plane）中的 Unicode 非组合字符以及基本多文种平面以外的非专用区（Private Use Area）字符。首字符之后，允许使用数字和 Unicode 字符组合。

    使用保留字（reserved word）作为标识符，需要在其前后增加反引号 `。例如，class 不是合法的标识符，但可以使用 `class`。反引号不属于标识符的一部分，`x` 和 x 表示同一标识符。

    闭包（closure）中如果没有明确指定参数名称，参数将被隐式命名为 $0、$1、$2等等。 这些命名在闭包作用域范围内是合法的标识符。
*/

/// 关键字和符号
/*
 下面这些被保留的关键字（keywords）不允许用作标识符，除非被反引号转义。

    用在声明中的关键字： class、deinit、enum、extension、func、import、init、let、protocol、static、struct、subscript、typealias、var
    用在语句中的关键字： break、case、continue、default、do、else、fallthrough、if、in、for、return、switch、where、while
    用在表达式和类型中的关键字： as、dynamicType、is、new、super、self、Self、Type、__COLUMN__、__FILE__、__FUNCTION__、__LINE__
    用在模式中的关键字： _
    特定上下文中被保留的关键字： associativity、didSet、get、infix、inout、left、mutating、none、nonmutating、operator、override、postfix、precedence、prefix、right、set、unowned、unowned(safe)、unowned(unsafe)、weak、willSet，这些关键字在特定上下文之外可以被用于标识符。
*/

/// 字面量

// 字面量是用来表示源码中某种特定类型的值，比如一个数字或字符串。

// 下面是字面量的一些示例：
42                 // 整型字面量
3.14159            // 浮点型字面量
"Hello, world!"    // 字符串型字面量
true               // 布尔型字面量”

// Swift会根据字面量去推导类型。整型字面量的默认类型是 Int，浮点型字面量的默认类型是 Double，字符串型字面量的默认类型是 String，布尔型字面量的默认类型是 Bool

/*  **整型字面量

   整型字面量（integer literals）表示未指定精度整型数的值。
   
   ①整型字面量默认用十进制表示，可以加前缀来指定其他的进制，二进制字面量加 0b，八进制字面量加 0o，十六进制字面量加 0x。
   ②十进制字面量包含数字 0 至 9。二进制字面量只包含 0 或 1，八进制字面量包含数字 0 至 7，十六进制字面量包含数字 0 至 9 以及字母 A 至 F （大小写均可）。
   ③负整数的字面量在整型字面量前加减号 -，比如 -42。
   ④整型字面面可以使用下划线 _ 来增加数字的可读性，下划线会被系统忽略，因此不会影响字面量的值。同样地，也可以在数字前加 0，并不会影响字面量的值。
   ⑤除非特别指定，整型字面量的默认推导类型为 Swift 标准库类型中的 Int。
*/

/*  **浮点型字面量

    浮点型字面量（floating-point literals）表示未指定精度浮点数的值。浮点型字面量默认用十进制表示（无前缀），也可以用十六进制表示（加前缀 0x）。

    ①十进制浮点型字面量（decimal floating-point literals）由十进制数字串后跟小数部分或指数部分（或两者皆有）组成。十进制小数部分由小数点 . 后跟十进制数字串组成。指数部分由大写或小写字母 e 为前缀后跟十进制数字串组成，这串数字表示 e 之前的数量乘以 10 的几次方。例如：1.25e2 表示 1.25 ⨉ 10^2，也就是 125.0；同样，1.25e－2 表示 1.25 ⨉ 10^－2，也就是 0.0125。
    ②十六进制浮点型字面量（hexadecimal floating-point literals）由前缀 0x 后跟可选的十六进制小数部分以及十六进制指数部分组成。十六进制小数部分由小数点后跟十六进制数字串组成。指数部分由大写或小写字母 p 为前缀后跟十进制数字串组成，这串数字表示 p 之前的数量乘以 2 的几次方。例如：0xFp2 表示 15 ⨉ 2^2，也就是 60；同样，0xFp-2 表示 15 ⨉ 2^-2，也就是 3.75。
    ③负的浮点型字面量由一元运算符减号 - 和浮点型字面量组成，例如 -42.5。
    ④浮点型字面量允许使用下划线 _ 来增强数字的可读性，下划线会被系统忽略，因此不会影响字面量的值。同样地，也可以在数字前加 0，并不会影响字面量的值。
    ⑤除非特别指定，浮点型字面量的默认推导类型为 Swift 标准库类型中的 Double，表示64位浮点数。Swift 标准库也定义了 Float 类型，表示32位浮点数。
*/

/*  **字符型字面量
   字符串型字面量（string literal）由被包在双引号中的一串字符组成，形式如："characters"

   字符串型字面量中不能包含未转义的双引号 （"）、未转义的反斜线（\）、回车符（carriage return）或换行符（line feed）。

   可以在字符串字面量中使用的转义特殊符号如下：

        空字符（Null Character）       \0
        反斜线（Backslash）            \\
        水平制表符（Horizontal Tab）    \t
        换行符（Line Feed）            \n
        回车符（Carriage Return）      \r
        双引号（Double Quote）         \"
        单引号（Single Quote）         \'
        Unicode标量 \u{n}，n为一到八位的十六进制数字

   字符串字面量允许在反斜杠小括号 \() 中插入表达式的值。插入表达式（interpolated expression）不能包含未转义的双引号 "、未转义的反斜线 \、回车符或者换行符。表达式结果的类型必须在 String 类中有对应的初始化方法。

   例如，以下所有字符串字面量的值都是相同的：

     "1 2 3"
     "1 2 \(3)"
     "1 2 \(1 + 2)"
     "let x = 3; "1 2 \(x)"

    字符串字面量的默认推导类型为 String。组成字符串的字符默认推导类型为 Character。

    用 ＋ 操作符连接的字符型字面量是在编译时进行连接的。比如下面的 textA 和 textB 时完全一样的—— textA 没有任何运行时的连接操作。

    let textA = "Hello " + "world"
    let textB = "Hello world"
*/

///  运算符
/*  **
    Swift 标准库定义了许多可供使用的运算符，这一小节将描述哪些字符能用于自定义运算符。

    自定义运算符可以由以下其中之一的 ASCII 字符 /、=、 -、+、!、*、%、<、>、&、|、^、? 以及 ~，或者后面语法中规定的任一个 Unicode 字符开始。在第一个字符之后，允许使用组合型 Unicode 字符。也可以使用两个或者多个的点号来自定义运算符（比如，....）。虽然可以自定义包含问号 ? 的运算符，但是这个运算符不能只包含单独的一个问号。

    PS：以下这些标记 =、->、//、/*、*/、.、<（前缀运算符）、&、?、?（中缀运算符）、>（后缀运算符）、! 、? 是被系统保留的。这些符号不能被重载，也不能用于自定义运算符。

    运算符两侧的空白被用来区分该运算符是否为前缀运算符、后缀运算符或二元运算符。规则总结如下：

       如果运算符两侧都有空白或两侧都无空白，将被看作二元运算符。例如：a+b 和 a + b 中的运算符 + 被看作二元运算符。
       如果运算符只有左侧空白，将被看作前缀一元运算符。例如 a ++b 中的 ++ 被看作前缀一元运算符。
       如果运算符只有右侧空白，将被看作后缀一元运算符。例如 a++ b 中的 ++ 被看作后缀一元运算符。
       如果运算符左侧没有空白并紧跟 .，将被看作后缀一元运算符。例如 a++.b 中的 ++ 被看作后缀一元运算符（即上式被视为 a++ .b 而非 a ++ .b）。
    
    鉴于这些规则，运算符前的字符 (、[ 和 {，运算符后的字符 )、] 和 }，以及字符 ,、; 和 : 都被视为空白。

    ****以上规则需注意一点，如果预定义运算符 ! 或 ? 左侧没有空白，则不管右侧是否有空白都将被看作后缀运算符。如果将 ? 用作可选链式调用运算符，左侧必须无空白。如果用于条件运算符 ? :，必须两侧都有空白。

    在某些特定的设计中 ，以 < 或 > 开头的运算符会被分离成两个或多个符号，剩余部分可能会以同样的方式被再次分离。因此，在 Dictionary<String, Array<Int>> 中没有必要添加空白来消除闭合字符 > 的歧义。在这个例子中， 闭合字符 > 不会被视为单独的符号，因而不会被错误解析为 >> 运算符。
*/









